{"version":3,"sources":["algorithms/heapSort.js","algorithms/mergeSort.js","algorithms/quickSort.js","algorithms/insertionSort.js","algorithms/bubbleSort.js","sortingVisualizer/sortingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["array_length","getMergeSortAnimations","arr","copy","len","length","animations","mergeSortHelper","Array","aux","left","right","mid","Math","floor","i","j","k","push","merge","getQuickSortAnimations","quickSortHelper","partition_index","pivot","swap","partition","index1","index2","temp","heap_root","root_index","max","SortingVisualizer","props","useState","array","setArray","isRunning","setIsRunning","isSorted","setIsSorted","animationSpeed","setAnimationSpeed","containerRef","useRef","initArray","arrayBars","current","children","style","backgroundColor","resetArrayColor","updateAlgoDescription","min","random","toggleDropdown","document","getElementById","classList","toggle","toggleSpeed","speed","innerHTML","animateBar","index","arrayBarStyle","setTimeout","animateArray","forEach","comparison","swapped","prevArr","newVal","newArr","animateSortedArray","algo","useEffect","className","href","id","type","onClick","n","getBubbleSortAnimations","getHeapSortAnimations","getInsertionSortAnimations","class","ref","map","value","idx","height","width","window","onclick","event","target","matches","dropdowns","getElementsByClassName","openDropdown","contains","remove","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.197484f9.chunk.js","sourcesContent":["var array_length;\n\nexport function getHeapSortAnimations(arr){\n    const copy = [...arr];\n    const animations = [];\n    array_length = copy.length;\n\n    for (var i = Math.floor(array_length / 2); i >= 0; i -= 1)      {\n        heap_root(copy, i, animations);\n      }\n\n    for (i = copy.length - 1; i > 0; i--) {\n        animations.push([[0, copy[i]], true]);\n        animations.push([[i, copy[0]], true]);\n        swap(copy, 0, i);\n        array_length--;\n      \n      \n        heap_root(copy, 0, animations);\n    }\n    return animations;\n}\n\nfunction heap_root(arr, root_index, animations){\n    var left = 2 * root_index + 1;\n    var right = 2 * root_index + 2;\n    var max = root_index;\n\n    if (left < array_length && arr[left] > arr[max]) {\n        max = left;\n    }\n\n    if (right < array_length && arr[right] > arr[max])     {\n        max = right;\n    }\n\n    if (max !== root_index) {\n        animations.push([[root_index, arr[max]], true]);\n        animations.push([[max, arr[root_index]], true]);\n        swap(arr, root_index, max);\n        heap_root(arr, max, animations);\n    }\n}\n\nfunction swap(arr, index1, index2) {\n    const temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n}","export function getMergeSortAnimations(arr){\n    const copy = [...arr];\n    const len = copy.length;\n    const tmpAux = Array(len);\n    const animations = [];\n    mergeSortHelper(copy, tmpAux, 0, len-1, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(arr, aux, left, right, animations){\n    if(right <= left) return;\n    const mid = left + Math.floor((right-left) / 2);\n    mergeSortHelper(arr, aux, left, mid, animations);\n    mergeSortHelper(arr, aux, mid + 1, right, animations);\n    merge(arr, aux, left, mid, right, animations);\n}\n\nfunction merge(arr, aux, left, mid, right, animations){\n    for(let i = left; i <= right; i++){\n        aux[i] = arr[i];\n    }\n    let i = left;\n    let j = mid + 1;\n    for(let k = left; k <= right; k++){\n        if(i > mid){\n            animations.push([[j], false]);\n            animations.push([[k, aux[j]], true]);\n            arr[k] = aux[j++];\n        } else if (j > right) {\n            animations.push([[i], false]);\n            animations.push([[k, aux[i]], true]);\n            arr[k] = aux[i++];\n        } else if (aux[j] < aux[i]) {\n            animations.push([[i, j], false]);\n            animations.push([[k, aux[j]], true]);\n            arr[k] = aux[j++];\n        } else {\n            animations.push([[i, j], false]);\n            animations.push([[k, aux[i]], true]);\n            arr[k] = aux[i++];\n        }\n    }\n}","export function getQuickSortAnimations(arr){\n    const copy = [...arr];\n    const animations = [];\n    quickSortHelper(copy, 0, copy.length-1, animations);\n    return animations;\n}\n\nfunction quickSortHelper(arr, left, right, animations){\n    if(right <= left) return;\n    const partition_index = partition(arr, left, right, animations);\n    quickSortHelper(arr, left, partition_index, animations);\n    quickSortHelper(arr, partition_index+1, right, animations);\n}\n\nfunction partition(arr, left, right, animations){\n    let i = left;\n    let j = right + 1;\n    const pivot = arr[left];\n    while (true) {\n        while (arr[++i] <= pivot) {\n          if (i === right) break;\n          animations.push([[i], false]);\n        }\n        while (arr[--j] >= pivot) {\n          if (j === left) break;\n          animations.push([[j], false]);\n        }\n        if (j <= i) break;\n        animations.push([[i, arr[j]], true]);\n        animations.push([[j, arr[i]], true]);\n        swap(arr, i, j);\n      }\n      animations.push([[left, arr[j]], true]);\n      animations.push([[j, arr[left]], true]);\n      swap(arr, left, j);\n      return j;\n}\n\nfunction swap(arr, index1, index2) {\n    const temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n}","export function getInsertionSortAnimations(arr) {\n    const copy = [...arr];\n    const animations = [];\n    for (let i = 1; i < copy.length; i++) {\n      for (let j = i - 1; j >= 0; j--) {\n        animations.push([[j, j + 1], false]);\n        if (copy[j + 1] < copy[j]) {\n          animations.push([[j, copy[j + 1]], true]);\n          animations.push([[j + 1, copy[j]], true]);\n          swap(copy, j, j + 1);\n        } else break;\n      }\n    }\n    return animations;\n  }  \n  \nfunction swap(arr, index1, index2) {\n    const temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n}","export function getBubbleSortAnimations(arr){\n    const copy = [...arr];\n    const animations = [];\n    const n = arr.length;\n    var swapped;\n    // Traverse the entire array\n    for(let i = 0; i < n; i++){\n        swapped = false;\n        // Last i elements are already in place\n        for(let j = 0; j < n-i-1; j++){\n            animations.push([[j, j + 1], false]);\n            // If an element is found that is greater than the element following, then swap\n            if(copy[j] > copy[j+1]){\n                animations.push([[j, copy[j+1]], true]);\n                animations.push([[j+1, copy[j]], true]);\n                swap(copy, j, j+1);\n                swapped = true;\n            }\n        }\n        // If no 2 elements were swapped in the inner loop, then break\n        if(swapped === false) break;\n    }\n    return animations;\n}\n\nfunction swap(arr, index1, index2) {\n    const temp = arr[index1];\n    arr[index1] = arr[index2];\n    arr[index2] = temp;\n}","import React, { useState, useEffect, useRef } from 'react';\nimport './sortingVisualizer.css';\nimport { getMergeSortAnimations } from '../algorithms/mergeSort';\nimport { getQuickSortAnimations } from '../algorithms/quickSort';\nimport { getInsertionSortAnimations } from '../algorithms/insertionSort';\nimport { getBubbleSortAnimations } from '../algorithms/bubbleSort';\nimport { getHeapSortAnimations } from '../algorithms/heapSort';\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\nexport default function SortingVisualizer(props){\n    // Use hooks to add react-states to function components without creating new classes\n    // Prototype:\n    //      const [foo, bar] = useState(x)\n    //      where foo is the current state and bar is the function that updates it\n    //      argument x cooresponds to the initial state\n    const [array, setArray] = useState([]);\n    const [isRunning, setIsRunning] = useState(false);\n    const [isSorted, setIsSorted] = useState(false);\n    const [animationSpeed, setAnimationSpeed] = useState(3);\n    // Use ref to store array bars for animating\n    const containerRef = useRef(null);\n\n    // Exectued after each render (refresh page | new-array button)\n    useEffect(initArray, []);\n\n    function initArray(){\n        if(isRunning) return;\n        if(isSorted) resetArrayColor();\n        updateAlgoDescription(\"Start\");\n        setIsSorted(false);\n        const arr = [];\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i++){\n            // Starting from value 5 so bars will be visible\n            arr.push(randomIntFromInterval(5, 125));\n        }\n        setArray(arr);\n    }\n\n    function toggleDropdown(){\n        if(isRunning) return;\n        document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n    }\n\n    function toggleSpeed(speed){\n        if(isRunning) return;\n        toggleDropdown();\n        setAnimationSpeed(speed);\n        document.getElementById(\"animation-speed\").innerHTML = `Animation Speed: \\n${speed}`;\n        if(speed === \"Slow\"){\n            setAnimationSpeed(5);\n          } else if(speed === \"Medium\"){\n            setAnimationSpeed(3);\n          } else{\n            setAnimationSpeed(1.5);\n          }\n    }\n\n    // ---------------------------- Animations ------------------------------\n\n    function resetArrayColor(){\n        const arrayBars = containerRef.current.children;\n        for(let i = 0; i < array.length; i++){\n            const arrayBarStyle = arrayBars[i].style;\n            arrayBarStyle.backgroundColor = '';\n        }\n    }\n\n    function animateSortedArray(){\n        const arrayBars = containerRef.current.children;\n        for(let i = 0; i < arrayBars.length; i++){\n            const arrayBarStyle = arrayBars[i].style;\n            setTimeout(\n                () => (arrayBarStyle.backgroundColor = 'LimeGreen'),\n                i * animationSpeed,\n            );\n        }\n        setTimeout(() => {\n            setIsSorted(true);\n            setIsRunning(false);\n        }, arrayBars.length * animationSpeed\n        );\n    }\n\n    function animateBar(index){\n        const arrayBars = containerRef.current.children;\n        const arrayBarStyle = arrayBars[index].style;\n        setTimeout(() => {\n            arrayBarStyle.backgroundColor = 'OrangeRed';\n        }, animationSpeed);\n        setTimeout(() => {\n            arrayBarStyle.backgroundColor = '';\n        }, 2 * animationSpeed)\n    }\n\n    function animateArray(animations){\n        if(isRunning) return;\n        setIsRunning(true);\n        animations.forEach(([comparison, swapped], index) => {\n            setTimeout(() => {\n                if(!swapped){\n                    if(comparison.length === 2){\n                        const [i, j] = comparison;\n                        animateBar(i);\n                        animateBar(j);\n                    } else{\n                        const [i] = comparison;\n                        animateBar(i);\n                    }\n                } else{\n                    setArray((prevArr) =>{\n                        const [k, newVal] = comparison;\n                        const newArr = [...prevArr];\n                        newArr[k] = newVal;\n                        return newArr;\n                    });\n                }\n            },  index * animationSpeed);\n        });\n        setTimeout(() => {\n            animateSortedArray();\n        }, animations.length * animationSpeed);\n    }\n\n    // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n    function randomIntFromInterval(min, max) {\n        // min and max included\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    function updateAlgoDescription(algo){\n        if(isRunning) return;\n        if(algo === \"mergeSort\"){\n            document.getElementById('algoDescription').innerHTML = `Merge Sort is a <i><b>divide and conquer</b></i> algorithm and <i><b>does guarantee</b></i> stablity!`;\n          }\n          else if(algo === \"quickSort\"){\n            document.getElementById('algoDescription').innerHTML = `Quick Sort is a <i><b>divide and conquer</b></i> algorithm and is performed <i><b>in place</b></i>!`;\n          }\n          else if(algo === \"bubbleSort\"){\n            document.getElementById('algoDescription').innerHTML = `Bubble Sort the simplest sorting algorithm that works by repeatedly swapping the adjacent elements if they are in wrong order!`;\n          }\n          else if(algo === \"heapSort\"){\n            document.getElementById('algoDescription').innerHTML = `Heap Sort is a <i><b> comparison-based</b></i> sorting algorithm based on the <i><b> binary heap </b></i> data structure!`;\n          } else if(algo === \"insertionSort\"){\n            document.getElementById('algoDescription').innerHTML = `Insertion Sort is an <i><b>in place </b></i> algorithm and <i><b>does guarantee </b></i> stability!`;\n          }   else{\n            document.getElementById('algoDescription').innerHTML = \"Select a sorting algorithm to visualize!\";\n          }\n    }\n\n    // --------------- Sorting Functions -------------------------\n\n    function mergeSort(){\n        updateAlgoDescription(\"mergeSort\");\n        const animations = getMergeSortAnimations(array);\n        animateArray(animations);\n    }\n\n    function quickSort(){\n        updateAlgoDescription(\"quickSort\");\n        const animations = getQuickSortAnimations(array);\n        animateArray(animations);\n    }\n\n    function bubbleSort(){\n        updateAlgoDescription(\"bubbleSort\");\n        const animations = getBubbleSortAnimations(array);\n        animateArray(animations);  \n    }\n\n    function insertionSort(){\n        updateAlgoDescription(\"insertionSort\");\n        const animations = getInsertionSortAnimations(array);\n        animateArray(animations);  \n    }\n\n    function heapSort(){\n        updateAlgoDescription(\"heapSort\");\n        const animations = getHeapSortAnimations(array);\n        animateArray(animations);   \n    }\n\n    // ----------------------------------------------------------------- //\n\n    return (\n        <div className=\"app-container\">\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n                <a className=\"navbar-brand\" href=\"https://jfur1.github.io/sorting-visualizer\">\n                    <b>Sorting Visualizer</b>\n                </a>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\">\n                            <a\n                                className=\"nav-link\"\n                                href=\"http://www.github.com/jfur1/sorting-visualizer\">\n                                {' '}\n                                Sorting Visualizer code{' '}\n                            </a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"https://github.com/jfur1\">\n                                Check Out Other Cool Projects\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n            <div id=\"programButtons\">\n                <button\n                    type=\"button\"\n                    className=\"btn btn-danger mr-1\"\n                    onClick={initArray}>\n                    New Array\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary mr-1\"\n                    onClick={mergeSort}>\n                    Merge Sort\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary mr-1\"\n                    onClick={quickSort}>\n                    Quick Sort\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary mr-1\"\n                    onClick={bubbleSort}>\n                    Bubble Sort\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary mr-1\"\n                    onClick={heapSort}>\n                    Heap Sort\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary mr-1\"\n                    onClick={insertionSort}>\n                    Insertion Sort\n                </button>\n                <div class=\"dropdown\">\n                    <button id=\"animation-speed\" onClick={() => toggleDropdown()} class=\"dropbtn\">Animation Speed: Medium</button>\n                    <div id=\"myDropdown\" class=\"dropdown-content\">\n                        <a href=\"#\" id=\"animate-slow\" onClick={() => toggleSpeed(\"Slow\")}>Slow</a>\n                        <a href=\"#\" id=\"animate-medium\" onClick={() => toggleSpeed(\"Medium\")}>Medium</a>\n                        <a href=\"#\" id=\"animate-fast\" onClick={() => toggleSpeed(\"Fast\")}>Fast</a>\n                </div>\n            </div>\n        </div>\n          <div id=\"algoDescription\"></div>\n            <div className = \"array-container\" ref={containerRef}>\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        style={{\n                            // Value for height is half of the array value\n                            height: `${value * 0.5 }vmin`,\n                            // Width of one bar is 1% of all the bars' widths \n                            width: `${100 / NUMBER_OF_ARRAY_BARS}vw`,\n                        }}\n                        key={idx}\n                    ></div>\n                ))}            \n            </div>\n        </div>\n    );\n}\n\n  // Close the dropdown menu if the user clicks outside of it\n  window.onclick = function(event) {\n    if (!event.target.matches('.dropbtn')) {\n    var dropdowns = document.getElementsByClassName(\"dropdown-content\");\n    var i;\n      for (i = 0; i < dropdowns.length; i++) {\n        var openDropdown = dropdowns[i];\n        if (openDropdown.classList.contains('show')) {\n          openDropdown.classList.remove('show');\n        }\n      }\n    }\n  }","import React from 'react';\nimport SortingVisualizer from './sortingVisualizer/sortingVisualizer';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <head><title>Test</title></head>\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}