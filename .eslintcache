[{"/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/index.js":"1","/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/App.js":"2","/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/reportWebVitals.js":"3","/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/sortingVisualizer/sortingVisualizer.jsx":"4","/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/algorithms/mergeSort.js":"5","/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/algorithms/quickSort.js":"6","/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/algorithms/insertionSort.js":"7","/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/algorithms/bubbleSort.js":"8"},{"size":449,"mtime":1610427815180,"results":"9","hashOfConfig":"10"},{"size":304,"mtime":1610491209242,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1610148234844,"results":"12","hashOfConfig":"10"},{"size":8320,"mtime":1610583264101,"results":"13","hashOfConfig":"10"},{"size":1386,"mtime":1610497916407,"results":"14","hashOfConfig":"10"},{"size":1259,"mtime":1610581092556,"results":"15","hashOfConfig":"10"},{"size":603,"mtime":1610581249333,"results":"16","hashOfConfig":"10"},{"size":969,"mtime":1610584441909,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1if4ebp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/index.js",[],["36","37"],"/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/App.js",[],"/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/reportWebVitals.js",[],"/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/sortingVisualizer/sortingVisualizer.jsx",["38"],"import React, { useState, useEffect, useRef } from 'react';\nimport './sortingVisualizer.css';\nimport { getMergeSortAnimations } from '../algorithms/mergeSort';\nimport { getQuickSortAnimations } from '../algorithms/quickSort';\nimport { getInsertionSortAnimations } from '../algorithms/insertionSort';\nimport { getBubbleSortAnimations } from '../algorithms/bubbleSort';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 3;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 100;\n\nexport default function SortingVisualizer(props){\n    // Use hooks to add react-states to function components without creating new classes\n    // Prototype:\n    //      const [foo, bar] = useState(x)\n    //      where foo is the current state and bar is the function that updates it\n    //      argument x cooresponds to the initial state\n    const [array, setArray] = useState([]);\n    const [isRunning, setIsRunning] = useState(false);\n    const [isSorted, setIsSorted] = useState(false);\n    // Use ref to store array bars for animating\n    const containerRef = useRef(null);\n\n    // Exectued after each render (refresh page | new-array button)\n    useEffect(initArray, []);\n\n    function initArray(){\n        if(isRunning) return;\n        if(isSorted) resetArrayColor();\n        setIsSorted(false);\n        const arr = [];\n        for(let i = 0; i < NUMBER_OF_ARRAY_BARS; i++){\n            // Starting from value 5 so bars will be visible\n            arr.push(randomIntFromInterval(5, 125));\n        }\n        setArray(arr);\n    }\n\n    // ---------------------------- Animations ------------------------------\n\n    function resetArrayColor(){\n        const arrayBars = containerRef.current.children;\n        for(let i = 0; i < array.length; i++){\n            const arrayBarStyle = arrayBars[i].style;\n            arrayBarStyle.backgroundColor = '';\n        }\n    }\n\n    function animateSortedArray(){\n        const arrayBars = containerRef.current.children;\n        for(let i = 0; i < arrayBars.length; i++){\n            const arrayBarStyle = arrayBars[i].style;\n            setTimeout(\n                () => (arrayBarStyle.backgroundColor = 'LimeGreen'),\n                i * ANIMATION_SPEED_MS,\n            );\n        }\n        setTimeout(() => {\n            setIsSorted(true);\n            setIsRunning(false);\n        }, arrayBars.length * ANIMATION_SPEED_MS\n        );\n    }\n\n    function animateBar(index){\n        const arrayBars = containerRef.current.children;\n        const arrayBarStyle = arrayBars[index].style;\n        setTimeout(() => {\n            arrayBarStyle.backgroundColor = 'OrangeRed';\n        }, ANIMATION_SPEED_MS);\n        setTimeout(() => {\n            arrayBarStyle.backgroundColor = '';\n        }, 2 * ANIMATION_SPEED_MS)\n    }\n\n    function animateArray(animations){\n        if(isRunning) return;\n        setIsRunning(true);\n        animations.forEach(([comparison, swapped], index) => {\n            setTimeout(() => {\n                if(!swapped){\n                    if(comparison.length === 2){\n                        const [i, j] = comparison;\n                        animateBar(i);\n                        animateBar(j);\n                    } else{\n                        const [i] = comparison;\n                        animateBar(i);\n                    }\n                } else{\n                    setArray((prevArr) =>{\n                        const [k, newVal] = comparison;\n                        const newArr = [...prevArr];\n                        newArr[k] = newVal;\n                        return newArr;\n                    });\n                }\n            },  index * ANIMATION_SPEED_MS);\n        });\n        setTimeout(() => {\n            animateSortedArray();\n        }, animations.length * ANIMATION_SPEED_MS);\n    }\n\n    // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n    function randomIntFromInterval(min, max) {\n        // min and max included\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    }\n\n    // --------------- Sorting Functions -------------------------\n\n    function mergeSort(){\n        const animations = getMergeSortAnimations(array);\n        animateArray(animations);\n    }\n\n    function quickSort(){\n        const animations = getQuickSortAnimations(array);\n        animateArray(animations);\n    }\n\n    function bubbleSort(){\n        const animations = getBubbleSortAnimations(array);\n        animateArray(animations);  \n    }\n\n    function insertionSort(){\n        const animations = getInsertionSortAnimations(array);\n        animateArray(animations);  \n    }\n\n    function heapSort(){\n        \n    }\n\n    // ----------------------------------------------------------------- //\n\n    return (\n        <div className=\"app-container\">\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark \">\n                <a className=\"navbar-brand\" href=\"https://jfur1.github.io/sorting-visualizer\">\n                    <b>Sorting Visualizer</b>\n                </a>\n                <button\n                    className=\"navbar-toggler\"\n                    type=\"button\"\n                    data-toggle=\"collapse\"\n                    data-target=\"#navbarNav\"\n                    aria-controls=\"navbarNav\"\n                    aria-expanded=\"false\"\n                    aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul className=\"navbar-nav\">\n                        <li className=\"nav-item\">\n                            <a\n                                className=\"nav-link\"\n                                href=\"http://www.github.com/jfur1/sorting-visualizer\">\n                                {' '}\n                                Sorting Visualizer code{' '}\n                            </a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"https://github.com/jfur1\">\n                                Check Out Other Cool Projects\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n            <div id=\"programButtons\">\n                <button\n                    type=\"button\"\n                    className=\"btn btn-danger mr-1\"\n                    onClick={initArray}>\n                    New Array\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary mr-1\"\n                    onClick={mergeSort}>\n                    Merge Sort\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary mr-1\"\n                    onClick={quickSort}>\n                    Quick Sort\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary mr-1\"\n                    onClick={bubbleSort}>\n                    Bubble Sort\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary mr-1\"\n                    onClick={heapSort}>\n                    Heap Sort\n                </button>\n                <button\n                    type=\"button\"\n                    className=\"btn btn-primary mr-1\"\n                    onClick={insertionSort}>\n                    Insertion Sort\n                </button>\n            </div>\n            <div className = \"array-container\" ref={containerRef}>\n                {array.map((value, idx) => (\n                    <div\n                        className=\"array-bar\"\n                        style={{\n                            // Value for height is half of the array value\n                            height: `${value * 0.5 }vmin`,\n                            // Width of one bar is 1% of all the bars' widths \n                            width: `${100 / NUMBER_OF_ARRAY_BARS}vw`,\n                        }}\n                        key={idx}\n                    ></div>\n                ))}            \n            </div>\n        </div>\n    );\n}","/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/algorithms/mergeSort.js",[],"/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/algorithms/quickSort.js",[],"/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/algorithms/insertionSort.js",[],"/Users/johnfurlong/Documents/code/Projects/sorting-visualizer/src/algorithms/bubbleSort.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":27,"column":26,"nodeType":"45","endLine":27,"endColumn":28,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isRunning', 'isSorted', and 'resetArrayColor'. Either include them or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [isRunning, isSorted, resetArrayColor]",{"range":"52","text":"53"},[1228,1230],"[isRunning, isSorted, resetArrayColor]"]